import json
from typing import Optional, Dict, Any, List

from app.core.logger import get_logger
from app.core.settings import settings
from app.core.connection_pool import connection_pool

logger = get_logger(name=__name__)


class ElasticRepository:
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Elasticsearch —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""

    def __init__(self):
        # –£–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        pass

    async def _get_client(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Elasticsearch –∏–∑ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        return await connection_pool.get_es_client()

    async def disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—É–ª–æ–º"""
        logger.info("üîå Elasticsearch disconnect called (managed by connection pool)")

    async def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            client = await self._get_client()
            await client.info()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    async def insert_document(self, index_name: str, document: Dict[str, Any]) -> bool:
        """–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            doc_id = document.get('title')
            client = await self._get_client()

            response = await client.index(
                index=index_name,
                body=document
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
            if response.get("result") in ["created", "updated"]:
                logger.debug(f"‚úÖ Document {doc_id} indexed successfully")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Unexpected response for document {doc_id}: {response}")
                return False

        except Exception as e:
            logger.error(f"‚ùå Error indexing document {doc_id}: {e}")
            return False

    async def search_documents(
            self,
            index_name: str,
            query: Dict[str, Any] = None,
            sort: List[Dict[str, Any]] = None,
            size: int = 10,
            from_: int = 0
    ) -> Optional[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        try:
            client = await self._get_client()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            body = {
                "query": query or {"match_all": {}},
                "size": size,
                "from": from_
            }

            if sort:
                body["sort"] = sort

            response = await client.search(
                index=index_name,
                body=body
            )

            return response

        except Exception as e:
            logger.error(f"‚ùå Error searching in index {index_name}: {e}")
            return None

    async def get_last_document_by_field(
            self,
            index_name: str,
            field="indexed_at"
    ) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—é"""
        try:
            # –ï—Å–ª–∏ –ø—ã—Ç–∞—é—Ç—Å—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ _id, –∏—Å–ø–æ–ª—å–∑—É–µ–º indexed_at
            if field == "_id":
                field = "indexed_at"
                logger.warning("‚ö†Ô∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ _id –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º indexed_at")

            # –ü–æ–∏—Å–∫ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é
            result = await self.search_documents(
                index_name=index_name,
                query={"match_all": {}},
                sort=[{field: {"order": "desc"}}],
                size=1
            )

            if result and result["hits"]["hits"]:
                hit = result["hits"]["hits"][0]
                doc = hit["_source"]
                doc["_id"] = hit["_id"]  # –î–æ–±–∞–≤–ª—è–µ–º _id –≤ –¥–æ–∫—É–º–µ–Ω—Ç
                return doc

            return None

        except Exception as e:
            logger.error(f"‚ùå Error getting last document by {field}: {e}")
            return None

    async def index_exists(self, index_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞"""
        try:
            client = await self._get_client()
            return await client.indices.exists(index=index_name)

        except Exception as e:
            logger.error(f"‚ùå Error checking index existence {index_name}: {e}")
            return False

    async def create_index(self, index_name: str, body: Dict[str, Any] = None) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å –º–∞–ø–ø–∏–Ω–≥–æ–º"""
        try:
            client = await self._get_client()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–¥–µ–∫—Å
            if await self.index_exists(index_name):
                logger.info(f"üìã Index {index_name} already exists")
                return True

            await client.indices.create(
                index=index_name,
                body=body
            )

            logger.info(f"‚úÖ Index {index_name} created successfully")
            return True

        except Exception as e:
            logger.error(f"‚ùå Error creating index {index_name}: {e}")
            return False

    async def get_document_count(self, index_name: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ"""
        try:
            client = await self._get_client()
            response = await client.count(index=index_name)
            return response.get("count", 0)

        except Exception as e:
            logger.error(f"‚ùå Error getting document count for {index_name}: {e}")
            return 0

    async def make_query(self, index_name: str, body: dict):
        """–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –≤ —ç–ª–∞—Å—Ç–∏–∫"""
        try:
            logger.debug(f"üîç Index: {index_name}")
            logger.debug(
                f"üîç Query body: {json.dumps(body, ensure_ascii=False, indent=2)}"
            )

            client = await self._get_client()
            response = await client.search(index=index_name, body=body)

            total_hits = response.body["hits"]["total"]
            logger.debug(f"üìä Total hits: {total_hits}")
            logger.debug(f"üìä Returned docs: {len(response.body['hits']['hits'])}")

            return response.body

        except Exception as e:
            logger.error(f"‚ùå Error: {e}")
            return False