from typing import Optional, Dict, Any, List

from elasticsearch import AsyncElasticsearch

from app.core.logger import get_logger
from app.core.settings import settings

logger = get_logger(name=__name__)


class ElasticRepository:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Elasticsearch"""

    def __init__(self):
        self.client: Optional[AsyncElasticsearch] = self._get_client()

    def _get_client(self) -> Optional[AsyncElasticsearch]:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Elasticsearch"""
        try:
            client = AsyncElasticsearch(
                hosts=[settings.get_elastic_dsn],
                max_retries=settings.ABSORBER_MAX_RETRIES,
                retry_on_timeout=True
            )

            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Elasticsearch —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return client

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch: {e}")
            return None

    def _connect_to_db(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥"""
        if not self.is_connected():
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î MongoDB: {self.client} is not connected!")
            return False
        try:
            database = self.client[settings.MONGO_DB_NAME]
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {settings.MONGO_DB_NAME}")
            return database

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î MongoDB: {e}")
            return None

    async def disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.client:
            try:
                await self.client.close()
                logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Elasticsearch –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

    async def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if not self.client:
            return False
        try:
            await self.client.info()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    async def insert_document(self, index_name: str, document: Dict[str, Any]) -> bool:
        """–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            doc_id = document.get('title')
            if not self.client:
                logger.error("‚ùå Elasticsearch client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False

            response = await self.client.index(
                index=index_name,
                body=document
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
            if response.get("result") in ["created", "updated"]:
                logger.debug(f"‚úÖ Document {doc_id} indexed successfully")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Unexpected response for document {doc_id}: {response}")
                return False

        except Exception as e:
            logger.error(f"‚ùå Error indexing document {doc_id}: {e}")
            return False

    async def search_documents(
            self,
            index_name: str,
            query: Dict[str, Any] = None,
            sort: List[Dict[str, Any]] = None,
            size: int = 10,
            from_: int = 0
    ) -> Optional[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        try:
            if not self.client:
                logger.error("‚ùå Elasticsearch client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            body = {
                "query": query or {"match_all": {}},
                "size": size,
                "from": from_
            }

            if sort:
                body["sort"] = sort

            response = await self.client.search(
                index=index_name,
                body=body
            )

            return response

        except Exception as e:
            logger.error(f"‚ùå Error searching in index {index_name}: {e}")
            return None

    async def get_last_document_by_field(
            self,
            index_name: str,
            field: str = "indexed_at"  # ‚Üê –ò–∑–º–µ–Ω–∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—é"""
        try:
            # –ï—Å–ª–∏ –ø—ã—Ç–∞—é—Ç—Å—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ _id, –∏—Å–ø–æ–ª—å–∑—É–µ–º indexed_at
            if field == "_id":
                field = "indexed_at"
                logger.warning("‚ö†Ô∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ _id –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º indexed_at")

            # –ü–æ–∏—Å–∫ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é
            result = await self.search_documents(
                index_name=index_name,
                query={"match_all": {}},
                sort=[{field: {"order": "desc"}}],
                size=1
            )

            if result and result["hits"]["hits"]:
                hit = result["hits"]["hits"][0]
                doc = hit["_source"]
                doc["_id"] = hit["_id"]  # –î–æ–±–∞–≤–ª—è–µ–º _id –≤ –¥–æ–∫—É–º–µ–Ω—Ç
                return doc

            return None

        except Exception as e:
            logger.error(f"‚ùå Error getting last document by {field}: {e}")
            return None

    async def index_exists(self, index_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞"""
        try:
            if not self.client:
                return False

            return await self.client.indices.exists(index=index_name)

        except Exception as e:
            logger.error(f"‚ùå Error checking index existence {index_name}: {e}")
            return False

    async def create_index(self, index_name: str, body: Dict[str, Any] = None) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å –º–∞–ø–ø–∏–Ω–≥–æ–º"""
        try:
            if not self.client:
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–¥–µ–∫—Å
            if await self.index_exists(index_name):
                logger.info(f"üìã Index {index_name} already exists")
                return True

            await self.client.indices.create(
                index=index_name,
                body=body
            )

            logger.info(f"‚úÖ Index {index_name} created successfully")
            return True

        except Exception as e:
            logger.error(f"‚ùå Error creating index {index_name}: {e}")
            return False

    async def get_document_count(self, index_name: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ"""
        try:
            if not self.client:
                return 0

            response = await self.client.count(index=index_name)
            return response.get("count", 0)

        except Exception as e:
            logger.error(f"‚ùå Error getting document count for {index_name}: {e}")
            return 0


# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
es_repository = ElasticRepository()
