from typing import Optional, Dict, Any, List

from motor.motor_asyncio import AsyncIOMotorClient, AsyncIOMotorDatabase, AsyncIOMotorCollection

from app.core.logger import get_logger
from app.core.settings import settings

logger = get_logger(name=__name__)


class MongoRepository:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MongoDB (—Ç–æ–ª—å–∫–æ –¥–ª—è absorber)"""

    def __init__(self):
        self.client: Optional[AsyncIOMotorClient] = self._get_client()
        self.database: Optional[AsyncIOMotorDatabase] = self._connect_to_db()

    def _get_client(self) -> Optional[AsyncIOMotorClient]:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            client = AsyncIOMotorClient(
                settings.get_mongo_connection_link,
                serverSelectionTimeoutMS=5000
            )
            return client
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É MongoDB: {e}")
            return None

    def _connect_to_db(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥"""
        try:
            database = self.client[settings.MONGO_DB_NAME]
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {settings.MONGO_DB_NAME}")
            return database

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î MongoDB: {e}")
            return None

    async def is_connected(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            is_connected = await self.client.admin.command('ping')
            return is_connected

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
            return False

    async def disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.client:
            try:
                self.client.close()
                logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

    async def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if not self.client:
            return False
        try:
            await self.client.admin.command('ping')
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def get_collection(self, collection_name: str) -> AsyncIOMotorCollection:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if self.database is None:  # <-- –ë–´–õ–û: if self.database is not None
            raise ValueError("Database not connected")
        return self.database[collection_name]

    async def find_documents(
            self,
            collection_name: str,
            filter_query: Dict[str, Any] = None,
            limit: int = None,
            sort: List[tuple] = None
    ) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è absorber)"""
        try:
            # –î–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if self.database is None:
                logger.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                return []

            collection = self.get_collection(collection_name)

            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            cursor = collection.find(filter_query or {})

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–≤–∞–∂–Ω–æ –¥–ª—è absorber - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ _id)
            if sort:
                cursor = cursor.sort(sort)

            # –õ–∏–º–∏—Ç (–¥–ª—è batch processing)
            if limit:
                cursor = cursor.limit(limit)

            documents = await cursor.to_list(length=limit)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ObjectId –≤ —Å—Ç—Ä–æ–∫–∏ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º _id –≤ mongo_id
            for doc in documents:
                if "_id" in doc:
                    doc["mongo_id"] = str(doc["_id"])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ mongo_id
                    del doc["_id"]  # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ _id

            return documents

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ {collection_name}: {e}")
            return []
