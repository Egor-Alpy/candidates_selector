from typing import Optional, List, Sequence, Dict, Any, Union

from fastapi import Depends
from sqlalchemy import insert, update
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload
from sqlalchemy.sql import select, text

from app.core.logger import get_logger
from app.models.tenders import (
    TenderPositions,
    TenderPositionAttributesMatches,
    Matches,
    TenderInfo,
)

logger = get_logger(name=__name__)

class PostgresRepository:
    def __init__(self, session: AsyncSession):
        self.db = session

    async def get_tender_positions(self, tender_id: int) -> List[dict] | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Ç–µ–Ω–¥–µ—Ä–∞ –ø–æ –µ–≥–æ pg id"""
        try:
            stmt = select(TenderPositions.id, TenderPositions.title, TenderPositions.category).where(TenderPositions.tender_id == tender_id)
            result = await self.db.execute(stmt)
            data_dict = [dict(row) for row in result.mappings()]

            return data_dict

        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id}: {e}')
            return None

    async def get_tender_positions_selectinload(self, tender_id: int) -> Sequence[TenderPositions] | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Ç–µ–Ω–¥–µ—Ä–∞ –ø–æ –µ–≥–æ pg id –≤–º–µ—Å—Ç–µ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏"""
        try:
            stmt = (
                select(TenderPositions)
                .options(selectinload(TenderPositions.attributes))
                .where(TenderPositions.tender_id == tender_id)
            )

            result = await self.db.execute(stmt)
            positions = result.scalars().all()

            return positions

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id}: {e}")
            return None

    async def create_tender_position_attribute_matches_bulk(
        self, matches_data: List[Dict[str, Any]]
    ) -> int | None:
        """–ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–π —Ç–µ–Ω–¥–µ—Ä–∞"""
        try:
            if not matches_data:
                logger.warning("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤")
                return 0

            stmt = insert(TenderPositionAttributesMatches).values(matches_data)
            result = await self.db.execute(stmt)
            await self.db.commit()

            rowcount = result.rowcount
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {rowcount} —Å–º—ç—Ç—á–µ–Ω–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤")
            return True

        except Exception as e:
            await self.db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {e}")
            return None

    async def create_tender_match(
        self, tender_position_id: int, product_id: int, match_score: int, max_match_score: int, percentage_match_score: float
    ) -> Matches | None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–Ω–¥–µ—Ä–∞"""
        try:
            new_match = Matches(
                tender_position_id=tender_position_id,
                product_id=product_id,
                match_score=match_score,
                max_match_score=max_match_score,
                percentage_match_score=percentage_match_score
            )

            self.db.add(new_match)
            await self.db.commit()
            await self.db.refresh(new_match)

            return new_match

        except Exception as e:
            await self.db.rollback()
            logger.error(
                f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {tender_position_id}, –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}"
            )
            return None

    async def create_tender_matches_batch(
        self, matches_data: List[Dict]
    ) -> List[Matches] | None:
        """–ë–∞—Ç—á–µ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Ç–µ–Ω–¥–µ—Ä–∞"""
        if not matches_data:
            return []

        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            matches_objects = [
                Matches(
                    tender_position_id=match_data.get("tender_position_id"),
                    product_id=match_data.get("product_id"),
                    match_score=match_data.get("match_score"),
                    max_match_score=match_data.get("max_match_score"),
                    percentage_match_score=match_data.get("percentage_match_score"),
                )
                for match_data in matches_data
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Å–µ—Å—Å–∏—é
            self.db.add_all(matches_objects)
            await self.db.commit()

            logger.info(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(matches_objects)} —Å–º—ç—Ç—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"
            )
            return matches_objects

        except Exception as e:
            await self.db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Ç–µ–Ω–¥–µ—Ä–∞: {e}")
            return None


    async def increment_processed_positions(self, tender_id: int) -> Union[int, None]:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª–µ processed_positions –Ω–∞ 1 –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä–∞"""
        try:
            stmt = (
                update(TenderInfo)
                .where(TenderInfo.id == tender_id)
                .values(processed_positions=TenderInfo.processed_positions + 1)
                .returning(TenderInfo.processed_positions)
            )
            result = await self.db.execute(stmt)
            await self.db.commit()

            new_value = result.scalar()
            logger.info(f"üìä –¢–µ–Ω–¥–µ—Ä {tender_id}: processed_positions = {new_value}")
            return new_value

        except Exception as e:
            await self.db.rollback()
            logger.error(
                f"–û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è processed_positions –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id}: {e}"
            )
            return None
