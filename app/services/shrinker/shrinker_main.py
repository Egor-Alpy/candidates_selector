from typing import Optional, List, Dict

from app.core.logger import get_logger
from app.core.settings import settings
from app.db.session import get_session
from app.models.tenders import TenderPositions
from app.repository.postgres import PostgresRepository
from app.services.attrs_standardizer import AttrsStandardizer
from app.services.trigrammer import Trigrammer
from app.services.unit_standardizer import UnitStandardizer
from app.services.vectorizer import SemanticMatcher

from app.services.shrinker.shrinker_positions_service import ShrinkerPositions
from app.services.shrinker.shrinker_products_service import ShrinkerProducts

logger = get_logger(name=__name__)

import asyncio


class Shrinker:
    def __init__(
        self,
    ):
        self.vectorizer = SemanticMatcher()
        self.attrs_sorter = AttrsStandardizer()
        self.unit_normalizer = UnitStandardizer()
        self.trigrammer = Trigrammer()

        self.shrinker_positions = ShrinkerPositions()
        self.shrinker_products = ShrinkerProducts()

        self.semaphore = asyncio.Semaphore(settings.SHRINKER_SEMAPHORE_SIZE)

    async def shrink(self, candidates: dict, position: TenderPositions):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        try:
            # –≠–¢–ê–ü 1: –ü–û–î–ì–û–¢–û–í–ö–ê
            logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ {position.title.upper()}")
            logger.info(f"–ü—Ä–∏—Å–≤–æ–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {position.category}")

            # –ü–∞—Ä—Å–∏–º –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ–∑–∏—Ü–∏–∏ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
            position_attrs = await self.shrinker_positions.parse_position_attributes(position.attributes)

            if len(position_attrs.get('attrs', [])) == 0:
                logger.warning("‚ùå –ù–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
                return


            # –≠–¢–ê–ü 2: –û–ë–†–ê–ë–û–¢–ö–ê –ö–ê–ù–î–ò–î–ê–¢–û–í
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(candidates['hits']['hits'])} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")

            position_max_points = len(position.attributes)
            min_required_points = position_max_points * settings.CANDIDATES_TRASHOLD_SCORE
            logger.info(f"–ú–∞–∫—Å. –±–∞–ª–ª: {position_max_points}  | –ú–∏–Ω. –±–∞–ª–ª –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∞: {min_required_points}")

            # –°–æ–∑–¥–∞–µ–º tasks –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            tasks = [
                self._process_with_semaphore(candidate, position_attrs, min_required_points)
                for candidate in candidates["hits"]["hits"]
            ]
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ tasks –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            results = await asyncio.gather(*tasks, return_exceptions=True)

            # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            processed_candidates = [
                result for result in results
                if isinstance(result, dict) and result is not None
            ]

            return processed_candidates

        except Exception as e:
            logger.error(f'Error: {e}')
            return None

    async def _process_with_semaphore(
        self, candidate, position_attrs, min_required_points
    ):
        async with self.semaphore:
            return await self.shrinker_products.process_single_candidate(
                candidate, position_attrs, min_required_points
            )

