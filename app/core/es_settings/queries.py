from typing import Optional

from app.core.settings import settings
from app.models.tenders import TenderPositions


class ElasticQueries:
    """–ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è ElasticSearch"""

    @staticmethod
    def get_query_v5(position: TenderPositions, size: Optional[int] = 200):
        """
        –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ –°–¢–†–û–ì–ò–ú —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –º—è–≥–∫–∏–º –ø–æ–∏—Å–∫–æ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–∞—Ç—Ä–∏–±—É—Ç–∞–º
        –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ Elasticsearch
        """
        positions_demands = []
        from app.core.logger import get_logger

        logger = get_logger(name=__name__)

        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–æ—á–µ–Ω—å –º—è–≥–∫–æ, –Ω–æ —Å –≤—ã—Å–æ–∫–∏–º –≤–µ—Å–æ–º)
        if position.title:
            positions_demands.append(
                {
                    "multi_match": {
                        "query": position.title,
                        "fields": [
                            "title^5",  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å –Ω–∞–∑–≤–∞–Ω–∏—è
                            "title.ngram^3",
                            "description^1",  # —Å–Ω–∏–∂–∞–µ–º –≤–µ—Å –æ–ø–∏—Å–∞–Ω–∏—è
                            "description.ngram^0.5",
                        ],
                        "type": "best_fields",
                        "fuzziness": "2",  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º fuzziness –¥–ª—è –º—è–≥–∫–æ—Å—Ç–∏
                        "minimum_should_match": "50%",  # —Ç–æ–ª—å–∫–æ 50% —Å–ª–æ–≤ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
                    }
                }
            )

        # –ú—è–≥–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º —Å –ù–û–í–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–æ–ª–µ–π
        for attribute in position.attributes:
            if attribute.type != "–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è" and attribute.type != "–î–∏–∞–ø–∞–∑–æ–Ω":
                # –ò—â–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –∞—Ç—Ä–∏–±—É—Ç–∞ –≤ –ù–û–í–´–• –ø–æ–ª—è—Ö
                positions_demands.append(
                    {
                        "nested": {
                            "path": "attributes",
                            "query": {
                                "multi_match": {
                                    "query": attribute.value,
                                    "fields": [
                                        # –ù–û–í–´–ï –ø–æ–ª—è –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π
                                        "attributes.original_value^3",  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                                        "attributes.original_value.ngram^2",
                                        # –ù–û–í–´–ï –ø–æ–ª—è –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                                        "attributes.original_name^2",  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                                        "attributes.original_name.ngram^1",
                                    ],
                                    "type": "best_fields",
                                    "fuzziness": "1",  # –ù–µ–º–Ω–æ–≥–æ fuzziness –¥–ª—è –æ–ø–µ—á–∞—Ç–æ–∫
                                    "minimum_should_match": "70%",  # 70% —Å–ª–æ–≤ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
                                }
                            },
                        }
                    }
                )

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∞—Ç—Ä–∏–±—É—Ç–∞
                positions_demands.append(
                    {
                        "nested": {
                            "path": "attributes",
                            "query": {
                                "multi_match": {
                                    "query": attribute.name,
                                    "fields": [
                                        "attributes.standardized_name^4",
                                        "attributes.standardized_name.ngram^2",
                                        "attributes.original_name^3",
                                        "attributes.original_name.ngram^1",
                                    ],
                                    "type": "best_fields",
                                    "fuzziness": "1",
                                    "minimum_should_match": "80%",  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π
                                }
                            },
                        }
                    }
                )

        # –ï—Å–ª–∏ –Ω–µ—Ç —É—Å–ª–æ–≤–∏–π –ø–æ–∏—Å–∫–∞, –¥–æ–±–∞–≤–∏–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
        if not positions_demands:
            positions_demands.append({"match_all": {}})

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –º—è–≥–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
        bool_query = {
            "should": positions_demands,
            "minimum_should_match": 0,  # –•–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –¥–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
        }

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
        category_filter = None
        if hasattr(position, "category") and position.category:
            category_filter = {
                "bool": {
                    "should": [
                        {"term": {"category.keyword": position.category}},
                        {"term": {"yandex_category.keyword": position.category}},
                        # {
                        #     "match": {
                        #         "category": {
                        #             "query": position.category,
                        #             "minimum_should_match": "100%",
                        #         }
                        #     }
                        # },
                        # {
                        #     "match": {
                        #         "yandex_category": {
                        #             "query": position.category,
                        #             "minimum_should_match": "100%",
                        #         }
                        #     }
                        # },
                    ],
                    "minimum_should_match": 1,
                }
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–∫ –º—è–≥–∫–æ–µ —É—Å–ª–æ–≤–∏–µ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
            if category_filter:
                bool_query["must"] = [category_filter]

        query = {
            "query": {"bool": bool_query},
            "size": size,
        }

        logger.info(f"üîç –ü–æ—Å—Ç—Ä–æ–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏: {position.title}")
        logger.debug(f"üîç –ó–∞–ø—Ä–æ—Å: {query}")

        return query

    @staticmethod
    def get_query_v6(position: TenderPositions, size: Optional[int] = settings.ES_CANDIDATES_QTY):
        """
        –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ –°–¢–†–û–ì–ò–ú —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –º—è–≥–∫–∏–º –ø–æ–∏—Å–∫–æ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        """
        positions_demands = []
        from app.core.logger import get_logger

        logger = get_logger(name=__name__)

        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–º—è–≥–∫–æ, —Å –≤—ã—Å–æ–∫–∏–º –≤–µ—Å–æ–º)
        if position.title:
            positions_demands.append(
                {
                    "multi_match": {
                        "query": position.title,
                        "fields": [
                            "title^5",  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å –Ω–∞–∑–≤–∞–Ω–∏—è
                            "title.ngram^3",
                            "description^1",  # —Å–Ω–∏–∂–∞–µ–º –≤–µ—Å –æ–ø–∏—Å–∞–Ω–∏—è
                            "description.ngram^0.5",
                        ],
                        "type": "best_fields",
                        "fuzziness": "2",  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º fuzziness –¥–ª—è –º—è–≥–∫–æ—Å—Ç–∏
                        "minimum_should_match": "50%",  # —Ç–æ–ª—å–∫–æ 50% —Å–ª–æ–≤ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
                    }
                }
            )

        # –ï—Å–ª–∏ –Ω–µ—Ç —É—Å–ª–æ–≤–∏–π –ø–æ–∏—Å–∫–∞, –¥–æ–±–∞–≤–∏–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
        if not positions_demands:
            positions_demands.append({"match_all": {}})

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –º—è–≥–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
        bool_query = {
            "should": positions_demands,
            "minimum_should_match": 0,  # –•–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –¥–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
        }

        # –°—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ)
        category_filter = None
        if hasattr(position, "category") and position.category:
            category_filter = {
                "bool": {
                    "should": [
                        {"term": {"category.exact": position.category}},
                        {"term": {"yandex_category.exact": position.category}},
                    ],
                    "minimum_should_match": 1,
                }
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ
            if category_filter:
                bool_query["must"] = [category_filter]

        query = {
            "query": {"bool": bool_query},
            "size": size,
        }

        logger.info(f"üîç –ü–æ—Å—Ç—Ä–æ–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏: {position.title}")
        logger.debug(f"üîç –ó–∞–ø—Ä–æ—Å: {query}")

        return query
